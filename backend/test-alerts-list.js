const mongoose = require('mongoose');
const Product = require('./models/Product');

mongoose.connect('mongodb://localhost:27017/pos-system', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(async () => {
    console.log('Connected to MongoDB');
    
    // Simulate the getStockAlerts function
    const productFilter = { 
      isActive: true,
      'inventory.alertOnLowStock': true
    };

    const products = await Product.find(productFilter)
      .populate('supplier', 'name')
      .populate('inventory.warehouse', 'name code')
      .populate('category', 'name')
      .sort({ 'inventory.currentStock': 1 });

    // Generate real-time alerts
    const alerts = [];
    for (const product of products) {
      const currentStock = product.inventory.currentStock;
      const minStock = product.inventory.minStock;
      const maxStock = product.inventory.maxStock;
      
      let alert = null;
      
      // Check for low stock or out of stock
      if (currentStock <= minStock) {
        const alertTypeValue = currentStock === 0 ? 'out_of_stock' : 'low_stock';
        const severityValue = currentStock === 0 ? 'critical' : 
                             currentStock <= (minStock * 0.5) ? 'critical' : 'high';
        
        alert = {
          _id: `alert_${product._id}_${alertTypeValue}`,
          product: product._id,
          productName: product.name,
          sku: product.sku,
          alertType: alertTypeValue,
          severity: severityValue,
          currentStock,
          threshold: minStock,
          warehouse: product.inventory.warehouse,
          supplier: product.supplier,
          message: currentStock === 0 
            ? `${product.name} (${product.sku}) is out of stock`
            : `${product.name} (${product.sku}) is running low (${currentStock} units remaining)`,
          isRead: false,
          isResolved: false,
          autoGenerated: true,
          createdAt: new Date(),
          updatedAt: new Date()
        };
      }
      // Check for overstock
      else if (currentStock > maxStock) {
        const alertTypeValue = 'overstock';
        const severityValue = 'medium';
        
        alert = {
          _id: `alert_${product._id}_${alertTypeValue}`,
          product: product._id,
          productName: product.name,
          sku: product.sku,
          alertType: alertTypeValue,
          severity: severityValue,
          currentStock,
          threshold: maxStock,
          warehouse: product.inventory.warehouse,
          supplier: product.supplier,
          message: `${product.name} (${product.sku}) has excess inventory (${currentStock} units, max: ${maxStock})`,
          isRead: false,
          isResolved: false,
          autoGenerated: true,
          createdAt: new Date(),
          updatedAt: new Date()
        };
      }
      
      if (alert) {
        alerts.push(alert);
      }
    }

    console.log('=== ALERTS LIST (getStockAlerts) ===');
    console.log(`Total alerts generated: ${alerts.length}`);
    console.log('\nAlerts:');
    alerts.forEach((alert, index) => {
      console.log(`${index + 1}. ${alert.productName} (${alert.sku})`);
      console.log(`   Type: ${alert.alertType}, Severity: ${alert.severity}`);
      console.log(`   Current: ${alert.currentStock}, Threshold: ${alert.threshold}`);
      console.log(`   Message: ${alert.message}`);
      console.log('');
    });
    
    process.exit(0);
  })
  .catch(err => {
    console.error('Error:', err);
    process.exit(1);
  });
